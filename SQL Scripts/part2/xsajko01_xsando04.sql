/*
File:       xsajko01_xsando04.sql
Authors:    Dominik Sajko (xsajko01), Daniela Sándorová (xsando04)
Date:       23.03.2024
Description: This script initializes the database and uploads data.
*/

/* ER DIAGRAM TABLES */

/*
The generalization relationship was broken down into separate tables according to the 4th IDS 
presentation (option 2), because it minimizes the complexity of the database.
*/
CREATE TABLE Dealer (
    dealer_id INT GENERATED BY DEFAULT ON NULL AS IDENTITY,
    first_name VARCHAR(64) NOT NULL,
    surname VARCHAR(64) NOT NULL,
    birth_date DATE NOT NULL,
    CONSTRAINT dealer_pk PRIMARY KEY (dealer_id)
);

CREATE TABLE Jailer (
    jailer_id INT GENERATED BY DEFAULT ON NULL AS IDENTITY,
    jail_id INT NOT NULL,
    first_name VARCHAR(64) NOT NULL,
    surname VARCHAR(64) NOT NULL,
    birth_date DATE NOT NULL,
    CONSTRAINT jailer_pk PRIMARY KEY (jailer_id)
);

CREATE TABLE Customer (
    customer_id INT GENERATED BY DEFAULT ON NULL AS IDENTITY,
    jail_id INT,
    first_name VARCHAR(64) NOT NULL,
    surname VARCHAR(64) NOT NULL,
    birth_date DATE NOT NULL,
    cell_number INT,
    cell_type VARCHAR(256),
    CONSTRAINT customer_pk PRIMARY KEY (customer_id)
);

CREATE TABLE Item_order (
    order_id INT NOT NULL,
    customer_id INT NOT NULL,
    first_pastry_EAN INT NOT NULL,
    price FLOAT(2) NOT NULL,
    delivery_type VARCHAR(256) NOT NULL,
    delivery_date DATE,
    CONSTRAINT item_order_pk PRIMARY KEY (order_id),
    CONSTRAINT item_price_validity CHECK (price >= 0)
);

CREATE TABLE Pastry (
    EAN INT NOT NULL,
    name VARCHAR(256) NOT NULL,
    order_id INT,
    first_ingredient INT,
    weight INT NOT NULL, -- in grams
    pastry_type VARCHAR(256) NOT NULL,
    CONSTRAINT pastry_pk PRIMARY KEY (EAN),
    CONSTRAINT pastry_weight_validity CHECK (weight > 0)
);

CREATE TABLE Ingredient (
    ingredient_id INT NOT NULL,
    name VARCHAR(256) NOT NULL,
    amount INT NOT NULL,
    price FLOAT(2) NOT NULL,
    CONSTRAINT ingredient_pk PRIMARY KEY (ingredient_id),
    CONSTRAINT ingredient_price_validity CHECK (price > 0),
    CONSTRAINT ingredient_amount_validity CHECK (amount >= 0)
);

CREATE TABLE Allergen (
    allergen_name VARCHAR(32) NOT NULL,
    CONSTRAINT allergen_pk PRIMARY KEY (allergen_name)
);

CREATE TABLE Jail (
    jail_id INT NOT NULL,
    delivery_zone_id INT NOT NULL,
    address VARCHAR(256) NOT NULL,
    CONSTRAINT jail_pk PRIMARY KEY (jail_id)
);

CREATE TABLE Shift (
    shift_id INT NOT NULL,
    jail_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    CONSTRAINT shift_pk PRIMARY KEY (shift_id),
    CONSTRAINT shift_time_validity CHECK (start_time < end_time)
);

CREATE TABLE Delivery_zone (
    delivery_zone_id INT NOT NULL,
    dealer_id INT NOT NULL,
    CONSTRAINT delivery_zone_pk PRIMARY KEY (delivery_zone_id)
);

CREATE TABLE Backed_item (
    backed_item_id INT NOT NULL,
    --first_pastry INT NOT NULL,
    weight INT NOT NULL,
    CONSTRAINT backed_item_pk PRIMARY KEY (backed_item_id),
    CONSTRAINT backed_item_weight_validity CHECK (weight > 0)
);

/* ASSOCIATIVE TABLES */

CREATE TABLE Dealer_Jailer (
    dealer_id INT NOT NULL,
    jailer_id INT NOT NULL
);

CREATE TABLE Jailer_Shift (
    jailer_id INT NOT NULL,
    shift_id INT NOT NULL,
    CONSTRAINT jailer_shift_pk PRIMARY KEY (jailer_id, shift_id)
);

CREATE TABLE Backed_item_Pastry (
    backed_item_id INT NOT NULL,
    EAN INT NOT NULL,
    CONSTRAINT backed_item_Pastry_pk PRIMARY KEY (backed_item_id, EAN)
);

CREATE TABLE Ingredient_Pastry (
    ingredient_id INT NOT NULL,
    EAN INT NOT NULL,
    CONSTRAINT ingredient_Pastry_pk PRIMARY KEY (ingredient_id, EAN)
);

CREATE TABLE Ingredient_Allergen (
    ingredient_id INT NOT NULL,
    allergen_name VARCHAR(32) NOT NULL
);

/* FOREIGN KEY SET UP */

/* ER tables */
ALTER TABLE Jailer ADD CONSTRAINT jailer_jail_fk FOREIGN KEY (jail_id) REFERENCES Jail(jail_id);
ALTER TABLE Customer ADD CONSTRAINT customer_jail_fk FOREIGN KEY (jail_id) REFERENCES Jail(jail_id);
ALTER TABLE Item_order ADD CONSTRAINT item_order_customer_fk FOREIGN KEY (customer_id) REFERENCES Customer(customer_id);
ALTER TABLE Pastry ADD CONSTRAINT pastry_order_fk FOREIGN KEY (order_id) REFERENCES Item_order(order_id);
ALTER TABLE Jail ADD CONSTRAINT jail_delivery_zone_fk FOREIGN KEY (delivery_zone_id) REFERENCES Delivery_zone(delivery_zone_id);
ALTER TABLE Shift ADD CONSTRAINT shift_jail_fk FOREIGN KEY (jail_id) REFERENCES Jail(jail_id);
ALTER TABLE Delivery_zone ADD CONSTRAINT delivery_zone_dealer_fk FOREIGN KEY (dealer_id) REFERENCES Dealer(dealer_id);

/* Associative tables */
ALTER TABLE Dealer_Jailer ADD CONSTRAINT dealer_jailer_dealer_fk FOREIGN KEY (dealer_id) REFERENCES Dealer(dealer_id);
ALTER TABLE Dealer_Jailer ADD CONSTRAINT dealer_jailer_jailer_fk FOREIGN KEY (jailer_id) REFERENCES Jailer(jailer_id);

ALTER TABLE Jailer_Shift ADD CONSTRAINT jailer_shift_jailer_fk FOREIGN KEY (jailer_id) REFERENCES Jailer(jailer_id);
ALTER TABLE Jailer_Shift ADD CONSTRAINT jailer_shift_shift_fk FOREIGN KEY (shift_id) REFERENCES Shift(shift_id);

ALTER TABLE Backed_item_Pastry ADD CONSTRAINT backed_item_backed_item_fk FOREIGN KEY (backed_item_id) REFERENCES Backed_item(backed_item_id);
ALTER TABLE Backed_item_Pastry ADD CONSTRAINT backed_item_ean_fk FOREIGN KEY (EAN) REFERENCES Pastry(EAN);

ALTER TABLE Ingredient_Pastry ADD CONSTRAINT ingredient_pastry_ingredient_fk FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id);
ALTER TABLE Ingredient_Pastry ADD CONSTRAINT ingredient_pastry_ean_fk FOREIGN KEY (EAN) REFERENCES Pastry(EAN);

ALTER TABLE Ingredient_Allergen ADD CONSTRAINT ingredient_allergen_ingredient_fk FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id);
ALTER TABLE Ingredient_Allergen ADD CONSTRAINT ingredient_allergen_allergen_name_fk FOREIGN KEY (allergen_name) REFERENCES Allergen(allergen_name);

/* At least one cardinality */
ALTER TABLE Pastry ADD CONSTRAINT pastry_first_ingredient FOREIGN KEY (first_ingredient) REFERENCES Ingredient(ingredient_id);
ALTER TABLE Item_order ADD CONSTRAINT item_order_first_pastry_EAN FOREIGN KEY (first_pastry_EAN) REFERENCES Pastry(EAN);


/* INSERT DATA TO DATABASE */
-- Dealers
INSERT INTO Dealer (dealer_id, first_name, surname, birth_date)
VALUES (101,'Marian','Kotleba',TO_DATE('1977-04-07', 'YYYY-MM-DD'));
INSERT INTO Dealer (dealer_id, first_name, surname, birth_date)
VALUES (102,'Martin','Beluský',TO_DATE('1987-04-17', 'YYYY-MM-DD'));

-- Delivery Zones
INSERT INTO Delivery_zone (delivery_zone_id, dealer_id)
VALUES (201,101);
INSERT INTO Delivery_zone (delivery_zone_id, dealer_id)
VALUES (202,102);

-- Jail
INSERT INTO Jail (jail_id, delivery_zone_id, address)
VALUES (1, 201, 'Gucmanova 670, 920 41 Leopoldov, Slovensko');

-- Shift
INSERT INTO Shift (shift_id, jail_id, start_time, end_time)
VALUES (301, 1, TO_TIMESTAMP('2024-03-20 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2024-03-20 16:00:00', 'YYYY-MM-DD HH24:MI:SS'));

-- Jailers
INSERT INTO Jailer (jailer_id,jail_id, first_name, surname, birth_date)
VALUES (401,1,'Richard','Sulík',TO_DATE('1968-01-12', 'YYYY-MM-DD'));
INSERT INTO Jailer (jailer_id,jail_id, first_name, surname, birth_date)
VALUES (402,1,'Branislav','Gröhling',TO_DATE('1975-04-06', 'YYYY-MM-DD'));

-- Dealer_Jailer
INSERT INTO Dealer_Jailer (dealer_id, jailer_id)
VALUES (101, 402);
INSERT INTO Dealer_Jailer (dealer_id, jailer_id)
VALUES (102, 401);

-- Jailer_Shift
INSERT INTO Jailer_Shift (jailer_id, shift_id)
VALUES (401, 301);



-- Customers
INSERT INTO Customer (customer_id,jail_id, first_name, surname, birth_date, cell_number, cell_type)
VALUES (501,1,'Peter', 'Pellegrini',TO_DATE('1975-10-06', 'YYYY-MM-DD'),1,'solitary');
COMMIT;
INSERT INTO Customer (customer_id,jail_id, first_name, surname, birth_date, cell_number, cell_type)
VALUES (502,1,'Matúš', 'Šutaj Eštok',TO_DATE('1987-02-04', 'YYYY-MM-DD'),2,'double');



-- Allergen
INSERT INTO Allergen (allergen_name)
VALUES ('gluten');

-- Ingredients
INSERT INTO Ingredient (ingredient_id, name, amount, price)
VALUES (601, 'whole-wheat flour', 1000, 2.99);

-- Ingredient_Allergen
INSERT INTO Ingredient_Allergen (ingredient_id, allergen_name)
VALUES (601, 'gluten');

-- Pastry
INSERT INTO Pastry (EAN, name, first_ingredient, weight, pastry_type)
VALUES (123456789, 'bread', 601, 100, 'whole-wheat');

-- Ingredient_Pastry
INSERT INTO Ingredient_Pastry (ingredient_id, EAN)
VALUES (601, 123456789);

-- Item Orders
INSERT INTO Item_order (order_id, customer_id, first_pastry_EAN, price, delivery_type, delivery_date)
VALUES (1, 501, 123456789, 2.99, 'express', TO_DATE('2024-03-25', 'YYYY-MM-DD'));

-- Backed Item
INSERT INTO Backed_item (backed_item_id, weight)
VALUES (1, 200);

-- Backed_item_Pastry
INSERT INTO Backed_item_Pastry (backed_item_id, EAN)
VALUES (1, 123456789);

COMMIT;